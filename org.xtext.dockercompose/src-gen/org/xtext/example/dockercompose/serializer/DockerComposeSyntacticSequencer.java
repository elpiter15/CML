/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.dockercompose.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.dockercompose.services.DockerComposeGrammarAccess;

@SuppressWarnings("all")
public class DockerComposeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DockerComposeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DockerCompose_ConfigsKeyword_4_0_q;
	protected AbstractElementAlias match_DockerCompose_NetworksKeyword_2_0_q;
	protected AbstractElementAlias match_DockerCompose_SecretsKeyword_5_0_q;
	protected AbstractElementAlias match_DockerCompose_ServicesKeyword_1_0_q;
	protected AbstractElementAlias match_DockerCompose_VolumesKeyword_3_0_q;
	protected AbstractElementAlias match_IPAMConfig_Aux_addressesKeyword_1_3_0_q;
	protected AbstractElementAlias match_IPAM_ConfigKeyword_1_1_0_q;
	protected AbstractElementAlias match_IPAM_OptionsKeyword_1_2_0_q;
	protected AbstractElementAlias match_NetworkConnector_AliasesKeyword_1_2_2_0_q;
	protected AbstractElementAlias match_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q;
	protected AbstractElementAlias match_NetworkConnector_long_AliasesKeyword_3_2_0_q;
	protected AbstractElementAlias match_NetworkConnector_long_Link_local_ipsKeyword_3_3_0_q;
	protected AbstractElementAlias match_Network_Driver_optsKeyword_3_1_7_0_q;
	protected AbstractElementAlias match_Network_LabelsKeyword_3_1_6_0_q;
	protected AbstractElementAlias match_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q;
	protected AbstractElementAlias match_Service_ConfigsKeyword_3_10_0_q;
	protected AbstractElementAlias match_Service_Depends_onKeyword_3_7_0_q;
	protected AbstractElementAlias match_Service_DevicesKeyword_3_12_0_q;
	protected AbstractElementAlias match_Service_DnsKeyword_3_13_0_q;
	protected AbstractElementAlias match_Service_NetworksKeyword_3_8_0_q;
	protected AbstractElementAlias match_Service_PortsKeyword_3_14_0_q;
	protected AbstractElementAlias match_Service_SecretsKeyword_3_11_0_q;
	protected AbstractElementAlias match_Service_VolumesKeyword_3_9_0_q;
	protected AbstractElementAlias match_Volume_Driver_optsKeyword_3_4_0_q;
	protected AbstractElementAlias match_Volume_LabelsKeyword_3_3_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DockerComposeGrammarAccess) access;
		match_DockerCompose_ConfigsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getDockerComposeAccess().getConfigsKeyword_4_0());
		match_DockerCompose_NetworksKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getDockerComposeAccess().getNetworksKeyword_2_0());
		match_DockerCompose_SecretsKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getDockerComposeAccess().getSecretsKeyword_5_0());
		match_DockerCompose_ServicesKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getDockerComposeAccess().getServicesKeyword_1_0());
		match_DockerCompose_VolumesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getDockerComposeAccess().getVolumesKeyword_3_0());
		match_IPAMConfig_Aux_addressesKeyword_1_3_0_q = new TokenAlias(false, true, grammarAccess.getIPAMConfigAccess().getAux_addressesKeyword_1_3_0());
		match_IPAM_ConfigKeyword_1_1_0_q = new TokenAlias(false, true, grammarAccess.getIPAMAccess().getConfigKeyword_1_1_0());
		match_IPAM_OptionsKeyword_1_2_0_q = new TokenAlias(false, true, grammarAccess.getIPAMAccess().getOptionsKeyword_1_2_0());
		match_NetworkConnector_AliasesKeyword_1_2_2_0_q = new TokenAlias(false, true, grammarAccess.getNetworkConnectorAccess().getAliasesKeyword_1_2_2_0());
		match_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q = new TokenAlias(false, true, grammarAccess.getNetworkConnectorAccess().getLink_local_ipsKeyword_1_2_3_0());
		match_NetworkConnector_long_AliasesKeyword_3_2_0_q = new TokenAlias(false, true, grammarAccess.getNetworkConnector_longAccess().getAliasesKeyword_3_2_0());
		match_NetworkConnector_long_Link_local_ipsKeyword_3_3_0_q = new TokenAlias(false, true, grammarAccess.getNetworkConnector_longAccess().getLink_local_ipsKeyword_3_3_0());
		match_Network_Driver_optsKeyword_3_1_7_0_q = new TokenAlias(false, true, grammarAccess.getNetworkAccess().getDriver_optsKeyword_3_1_7_0());
		match_Network_LabelsKeyword_3_1_6_0_q = new TokenAlias(false, true, grammarAccess.getNetworkAccess().getLabelsKeyword_3_1_6_0());
		match_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getNetworkAccess().getLeftCurlyBracketKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getNetworkAccess().getRightCurlyBracketKeyword_3_0_1()));
		match_Service_ConfigsKeyword_3_10_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getConfigsKeyword_3_10_0());
		match_Service_Depends_onKeyword_3_7_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getDepends_onKeyword_3_7_0());
		match_Service_DevicesKeyword_3_12_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0());
		match_Service_DnsKeyword_3_13_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getDnsKeyword_3_13_0());
		match_Service_NetworksKeyword_3_8_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getNetworksKeyword_3_8_0());
		match_Service_PortsKeyword_3_14_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0());
		match_Service_SecretsKeyword_3_11_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getSecretsKeyword_3_11_0());
		match_Service_VolumesKeyword_3_9_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getVolumesKeyword_3_9_0());
		match_Volume_Driver_optsKeyword_3_4_0_q = new TokenAlias(false, true, grammarAccess.getVolumeAccess().getDriver_optsKeyword_3_4_0());
		match_Volume_LabelsKeyword_3_3_0_q = new TokenAlias(false, true, grammarAccess.getVolumeAccess().getLabelsKeyword_3_3_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEBooleanRule())
			return getEBooleanToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EBoolean returns ecore::EBoolean:
	 * 	'true' | 'false';
	 */
	protected String getEBooleanToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DockerCompose_ConfigsKeyword_4_0_q.equals(syntax))
				emit_DockerCompose_ConfigsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_NetworksKeyword_2_0_q.equals(syntax))
				emit_DockerCompose_NetworksKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_SecretsKeyword_5_0_q.equals(syntax))
				emit_DockerCompose_SecretsKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_ServicesKeyword_1_0_q.equals(syntax))
				emit_DockerCompose_ServicesKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_VolumesKeyword_3_0_q.equals(syntax))
				emit_DockerCompose_VolumesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IPAMConfig_Aux_addressesKeyword_1_3_0_q.equals(syntax))
				emit_IPAMConfig_Aux_addressesKeyword_1_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IPAM_ConfigKeyword_1_1_0_q.equals(syntax))
				emit_IPAM_ConfigKeyword_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IPAM_OptionsKeyword_1_2_0_q.equals(syntax))
				emit_IPAM_OptionsKeyword_1_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetworkConnector_AliasesKeyword_1_2_2_0_q.equals(syntax))
				emit_NetworkConnector_AliasesKeyword_1_2_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q.equals(syntax))
				emit_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetworkConnector_long_AliasesKeyword_3_2_0_q.equals(syntax))
				emit_NetworkConnector_long_AliasesKeyword_3_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetworkConnector_long_Link_local_ipsKeyword_3_3_0_q.equals(syntax))
				emit_NetworkConnector_long_Link_local_ipsKeyword_3_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Network_Driver_optsKeyword_3_1_7_0_q.equals(syntax))
				emit_Network_Driver_optsKeyword_3_1_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Network_LabelsKeyword_3_1_6_0_q.equals(syntax))
				emit_Network_LabelsKeyword_3_1_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q.equals(syntax))
				emit_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_ConfigsKeyword_3_10_0_q.equals(syntax))
				emit_Service_ConfigsKeyword_3_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_Depends_onKeyword_3_7_0_q.equals(syntax))
				emit_Service_Depends_onKeyword_3_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_DevicesKeyword_3_12_0_q.equals(syntax))
				emit_Service_DevicesKeyword_3_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_DnsKeyword_3_13_0_q.equals(syntax))
				emit_Service_DnsKeyword_3_13_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_NetworksKeyword_3_8_0_q.equals(syntax))
				emit_Service_NetworksKeyword_3_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_PortsKeyword_3_14_0_q.equals(syntax))
				emit_Service_PortsKeyword_3_14_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_SecretsKeyword_3_11_0_q.equals(syntax))
				emit_Service_SecretsKeyword_3_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_VolumesKeyword_3_9_0_q.equals(syntax))
				emit_Service_VolumesKeyword_3_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Volume_Driver_optsKeyword_3_4_0_q.equals(syntax))
				emit_Volume_Driver_optsKeyword_3_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Volume_LabelsKeyword_3_3_0_q.equals(syntax))
				emit_Volume_LabelsKeyword_3_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'configs:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=Config (ambiguity) configs+=Config
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_ConfigsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'networks:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     networks+=Network (ambiguity) networks+=Network
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_NetworksKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'secrets:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_SecretsKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'services:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service (ambiguity) services+=Service
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_ServicesKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'volumes:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Volume (ambiguity) volumes+=Volume
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_VolumesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'aux_addresses:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     aux_addresses+=IPAMAddress (ambiguity) aux_addresses+=IPAMAddress
	 
	 * </pre>
	 */
	protected void emit_IPAMConfig_Aux_addressesKeyword_1_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'config:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=IPAMConfig (ambiguity) '-' configs+=IPAMConfig
	 
	 * </pre>
	 */
	protected void emit_IPAM_ConfigKeyword_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'options:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=IPAMOption (ambiguity) options+=IPAMOption
	 
	 * </pre>
	 */
	protected void emit_IPAM_OptionsKeyword_1_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'aliases:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     aliases+=Alias (ambiguity) '-' aliases+=Alias
	 
	 * </pre>
	 */
	protected void emit_NetworkConnector_AliasesKeyword_1_2_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'link_local_ips:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     link_local_ips+=DNS (ambiguity) '-' link_local_ips+=DNS
	 
	 * </pre>
	 */
	protected void emit_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'aliases:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     aliases+=Alias (ambiguity) '-' aliases+=Alias
	 
	 * </pre>
	 */
	protected void emit_NetworkConnector_long_AliasesKeyword_3_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'link_local_ips:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     link_local_ips+=DNS (ambiguity) '-' link_local_ips+=DNS
	 
	 * </pre>
	 */
	protected void emit_NetworkConnector_long_Link_local_ipsKeyword_3_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'driver_opts:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     driver_opts+=NetworkDriverOpt (ambiguity) driver_opts+=NetworkDriverOpt
	 
	 * </pre>
	 */
	protected void emit_Network_Driver_optsKeyword_3_1_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'labels:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=NetworkLabel (ambiguity) labels+=NetworkLabel
	 
	 * </pre>
	 */
	protected void emit_Network_LabelsKeyword_3_1_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString ':' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'configs:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=ConfigConnector_long (ambiguity) '-' configs+=ConfigConnector_long
	 *     configs+=ConfigConnector_short (ambiguity) '-' configs+=ConfigConnector_short
	 
	 * </pre>
	 */
	protected void emit_Service_ConfigsKeyword_3_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'depends_on:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     depends_on+=Dependency (ambiguity) '-' depends_on+=Dependency
	 
	 * </pre>
	 */
	protected void emit_Service_Depends_onKeyword_3_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'devices:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     devices+=Device (ambiguity) '-' devices+=Device
	 
	 * </pre>
	 */
	protected void emit_Service_DevicesKeyword_3_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'dns:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     dns+=DNS (ambiguity) '-' dns+=DNS
	 
	 * </pre>
	 */
	protected void emit_Service_DnsKeyword_3_13_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'networks:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     networks+=NetworkConnector_long (ambiguity) networks+=NetworkConnector_long
	 *     networks+=NetworkConnector_short (ambiguity) networks+=NetworkConnector_short
	 
	 * </pre>
	 */
	protected void emit_Service_NetworksKeyword_3_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'ports:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Port (ambiguity) '-' ports+=Port
	 
	 * </pre>
	 */
	protected void emit_Service_PortsKeyword_3_14_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'secrets:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=SecretConnector_long (ambiguity) '-' secrets+=SecretConnector_long
	 *     secrets+=SecretConnector_short (ambiguity) '-' secrets+=SecretConnector_short
	 
	 * </pre>
	 */
	protected void emit_Service_SecretsKeyword_3_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'volumes:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=VolumeConnector_long (ambiguity) '-' volumes+=VolumeConnector_long
	 *     volumes+=VolumeConnector_short (ambiguity) '-' volumes+=VolumeConnector_short
	 
	 * </pre>
	 */
	protected void emit_Service_VolumesKeyword_3_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'driver_opts:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     driver_opts+=VolumeDriverOpt (ambiguity) driver_opts+=VolumeDriverOpt
	 
	 * </pre>
	 */
	protected void emit_Volume_Driver_optsKeyword_3_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'labels:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=VolumeLabel (ambiguity) labels+=VolumeLabel
	 
	 * </pre>
	 */
	protected void emit_Volume_LabelsKeyword_3_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
