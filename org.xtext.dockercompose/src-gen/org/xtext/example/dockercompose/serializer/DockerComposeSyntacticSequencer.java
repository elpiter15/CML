/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.dockercompose.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.dockercompose.services.DockerComposeGrammarAccess;

@SuppressWarnings("all")
public class DockerComposeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DockerComposeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a;
	protected AbstractElementAlias match_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__p;
	protected AbstractElementAlias match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ConfigsKeyword_4_0__q;
	protected AbstractElementAlias match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_NetworksKeyword_2_0__q;
	protected AbstractElementAlias match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_SecretsKeyword_5_0__q;
	protected AbstractElementAlias match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ServicesKeyword_1_0__q;
	protected AbstractElementAlias match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_VolumesKeyword_3_0__q;
	protected AbstractElementAlias match_IPAMConfig_Aux_addressesKeyword_1_3_0_q;
	protected AbstractElementAlias match_IPAM_ConfigKeyword_1_1_0_q;
	protected AbstractElementAlias match_IPAM_OptionsKeyword_1_2_0_q;
	protected AbstractElementAlias match_NetworkConnector_AliasesKeyword_1_2_2_0_q;
	protected AbstractElementAlias match_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q;
	protected AbstractElementAlias match_Network_Driver_optsKeyword_3_1_7_0_q;
	protected AbstractElementAlias match_Network_LabelsKeyword_3_1_6_0_q;
	protected AbstractElementAlias match_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q;
	protected AbstractElementAlias match_Service_____DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a;
	protected AbstractElementAlias match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_ConfigsKeyword_3_10_0__q;
	protected AbstractElementAlias match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_Depends_onKeyword_3_7_0__q;
	protected AbstractElementAlias match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_DnsKeyword_3_13_0__q;
	protected AbstractElementAlias match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_NetworksKeyword_3_8_0__q;
	protected AbstractElementAlias match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_SecretsKeyword_3_11_0__q;
	protected AbstractElementAlias match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_VolumesKeyword_3_9_0__q;
	protected AbstractElementAlias match_Volume_Driver_optsKeyword_3_4_0_q;
	protected AbstractElementAlias match_Volume_LabelsKeyword_3_3_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DockerComposeGrammarAccess) access;
		match_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1()));
		match_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1()));
		match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ConfigsKeyword_4_0__q = new GroupAlias(false, true, new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1())), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getConfigsKeyword_4_0()));
		match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_NetworksKeyword_2_0__q = new GroupAlias(false, true, new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1())), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getNetworksKeyword_2_0()));
		match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_SecretsKeyword_5_0__q = new GroupAlias(false, true, new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1())), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getSecretsKeyword_5_0()));
		match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ServicesKeyword_1_0__q = new GroupAlias(false, true, new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1())), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getServicesKeyword_1_0()));
		match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_VolumesKeyword_3_0__q = new GroupAlias(false, true, new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVersionKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVERSIONTerminalRuleCall_0_1())), new TokenAlias(false, false, grammarAccess.getDockerComposeAccess().getVolumesKeyword_3_0()));
		match_IPAMConfig_Aux_addressesKeyword_1_3_0_q = new TokenAlias(false, true, grammarAccess.getIPAMConfigAccess().getAux_addressesKeyword_1_3_0());
		match_IPAM_ConfigKeyword_1_1_0_q = new TokenAlias(false, true, grammarAccess.getIPAMAccess().getConfigKeyword_1_1_0());
		match_IPAM_OptionsKeyword_1_2_0_q = new TokenAlias(false, true, grammarAccess.getIPAMAccess().getOptionsKeyword_1_2_0());
		match_NetworkConnector_AliasesKeyword_1_2_2_0_q = new TokenAlias(false, true, grammarAccess.getNetworkConnectorAccess().getAliasesKeyword_1_2_2_0());
		match_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q = new TokenAlias(false, true, grammarAccess.getNetworkConnectorAccess().getLink_local_ipsKeyword_1_2_3_0());
		match_Network_Driver_optsKeyword_3_1_7_0_q = new TokenAlias(false, true, grammarAccess.getNetworkAccess().getDriver_optsKeyword_3_1_7_0());
		match_Network_LabelsKeyword_3_1_6_0_q = new TokenAlias(false, true, grammarAccess.getNetworkAccess().getLabelsKeyword_3_1_6_0());
		match_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getNetworkAccess().getLeftCurlyBracketKeyword_3_0_0()), new TokenAlias(false, false, grammarAccess.getNetworkAccess().getRightCurlyBracketKeyword_3_0_1()));
		match_Service_____DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a = new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1()))));
		match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_ConfigsKeyword_3_10_0__q = new GroupAlias(false, true, new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1())))), new TokenAlias(false, false, grammarAccess.getServiceAccess().getConfigsKeyword_3_10_0()));
		match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_Depends_onKeyword_3_7_0__q = new GroupAlias(false, true, new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1())))), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDepends_onKeyword_3_7_0()));
		match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_DnsKeyword_3_13_0__q = new GroupAlias(false, true, new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1())))), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDnsKeyword_3_13_0()));
		match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_NetworksKeyword_3_8_0__q = new GroupAlias(false, true, new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1())))), new TokenAlias(false, false, grammarAccess.getServiceAccess().getNetworksKeyword_3_8_0()));
		match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_SecretsKeyword_3_11_0__q = new GroupAlias(false, true, new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1())))), new TokenAlias(false, false, grammarAccess.getServiceAccess().getSecretsKeyword_3_11_0()));
		match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_VolumesKeyword_3_9_0__q = new GroupAlias(false, true, new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getDevicesKeyword_3_12_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_12_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getDEVICETerminalRuleCall_3_12_1_1()))), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getPortsKeyword_3_14_0()), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getServiceAccess().getHyphenMinusKeyword_3_14_1_0()), new TokenAlias(false, false, grammarAccess.getServiceAccess().getPORTTerminalRuleCall_3_14_1_1())))), new TokenAlias(false, false, grammarAccess.getServiceAccess().getVolumesKeyword_3_9_0()));
		match_Volume_Driver_optsKeyword_3_4_0_q = new TokenAlias(false, true, grammarAccess.getVolumeAccess().getDriver_optsKeyword_3_4_0());
		match_Volume_LabelsKeyword_3_3_0_q = new TokenAlias(false, true, grammarAccess.getVolumeAccess().getLabelsKeyword_3_3_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDEVICERule())
			return getDEVICEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEBooleanRule())
			return getEBooleanToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPORTRule())
			return getPORTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVERSIONRule())
			return getVERSIONToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal DEVICE:
	 * 	'"''.'?'/'?ID':''.'?'/'?ID(':'ID)?'"';
	 */
	protected String getDEVICEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\":\"";
	}
	
	/**
	 * EBoolean returns ecore::EBoolean:
	 * 	'true' | 'false';
	 */
	protected String getEBooleanToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * terminal PORT:
	 * 	'"'(((((('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	 * 	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	 * 	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	 * 	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))':')?INT'-'INT':')?INT'-'INT('/'ID)?)
	 * 	| ((((('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	 * 	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	 * 	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	 * 	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))':')?INT':')?INT('/'ID)?))'"';
	 */
	protected String getPORTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"-\"";
	}
	
	/**
	 * terminal VERSION:
	 * 	'"'INT '.' INT'"';
	 */
	protected String getVERSIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\".\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a.equals(syntax))
				emit_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__p.equals(syntax))
				emit_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ConfigsKeyword_4_0__q.equals(syntax))
				emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ConfigsKeyword_4_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_NetworksKeyword_2_0__q.equals(syntax))
				emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_NetworksKeyword_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_SecretsKeyword_5_0__q.equals(syntax))
				emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_SecretsKeyword_5_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ServicesKeyword_1_0__q.equals(syntax))
				emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ServicesKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_VolumesKeyword_3_0__q.equals(syntax))
				emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_VolumesKeyword_3_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IPAMConfig_Aux_addressesKeyword_1_3_0_q.equals(syntax))
				emit_IPAMConfig_Aux_addressesKeyword_1_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IPAM_ConfigKeyword_1_1_0_q.equals(syntax))
				emit_IPAM_ConfigKeyword_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IPAM_OptionsKeyword_1_2_0_q.equals(syntax))
				emit_IPAM_OptionsKeyword_1_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetworkConnector_AliasesKeyword_1_2_2_0_q.equals(syntax))
				emit_NetworkConnector_AliasesKeyword_1_2_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q.equals(syntax))
				emit_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Network_Driver_optsKeyword_3_1_7_0_q.equals(syntax))
				emit_Network_Driver_optsKeyword_3_1_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Network_LabelsKeyword_3_1_6_0_q.equals(syntax))
				emit_Network_LabelsKeyword_3_1_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q.equals(syntax))
				emit_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_____DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a.equals(syntax))
				emit_Service_____DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_ConfigsKeyword_3_10_0__q.equals(syntax))
				emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_ConfigsKeyword_3_10_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_Depends_onKeyword_3_7_0__q.equals(syntax))
				emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_Depends_onKeyword_3_7_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_DnsKeyword_3_13_0__q.equals(syntax))
				emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_DnsKeyword_3_13_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_NetworksKeyword_3_8_0__q.equals(syntax))
				emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_NetworksKeyword_3_8_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_SecretsKeyword_3_11_0__q.equals(syntax))
				emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_SecretsKeyword_3_11_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_VolumesKeyword_3_9_0__q.equals(syntax))
				emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_VolumesKeyword_3_9_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Volume_Driver_optsKeyword_3_4_0_q.equals(syntax))
				emit_Volume_Driver_optsKeyword_3_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Volume_LabelsKeyword_3_3_0_q.equals(syntax))
				emit_Volume_LabelsKeyword_3_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('version:' VERSION)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'configs:' configs+=Config
	 *     (rule start) (ambiguity) 'networks:' networks+=Network
	 *     (rule start) (ambiguity) 'secrets:' secrets+=Secret
	 *     (rule start) (ambiguity) 'services:' services+=Service
	 *     (rule start) (ambiguity) 'volumes:' volumes+=Volume
	 *     (rule start) (ambiguity) (rule start)
	 *     configs+=Config (ambiguity) 'networks:' networks+=Network
	 *     configs+=Config (ambiguity) 'secrets:' secrets+=Secret
	 *     configs+=Config (ambiguity) 'services:' services+=Service
	 *     configs+=Config (ambiguity) 'volumes:' volumes+=Volume
	 *     configs+=Config (ambiguity) (rule end)
	 *     networks+=Network (ambiguity) 'configs:' configs+=Config
	 *     networks+=Network (ambiguity) 'secrets:' secrets+=Secret
	 *     networks+=Network (ambiguity) 'services:' services+=Service
	 *     networks+=Network (ambiguity) 'volumes:' volumes+=Volume
	 *     networks+=Network (ambiguity) (rule end)
	 *     secrets+=Secret (ambiguity) 'configs:' configs+=Config
	 *     secrets+=Secret (ambiguity) 'networks:' networks+=Network
	 *     secrets+=Secret (ambiguity) 'services:' services+=Service
	 *     secrets+=Secret (ambiguity) 'volumes:' volumes+=Volume
	 *     secrets+=Secret (ambiguity) (rule end)
	 *     services+=Service (ambiguity) 'configs:' configs+=Config
	 *     services+=Service (ambiguity) 'networks:' networks+=Network
	 *     services+=Service (ambiguity) 'secrets:' secrets+=Secret
	 *     services+=Service (ambiguity) 'volumes:' volumes+=Volume
	 *     services+=Service (ambiguity) (rule end)
	 *     volumes+=Volume (ambiguity) 'configs:' configs+=Config
	 *     volumes+=Volume (ambiguity) 'networks:' networks+=Network
	 *     volumes+=Volume (ambiguity) 'secrets:' secrets+=Secret
	 *     volumes+=Volume (ambiguity) 'services:' services+=Service
	 *     volumes+=Volume (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('version:' VERSION)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_DockerCompose___VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('version:' VERSION)* 'configs:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=Config (ambiguity) configs+=Config
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ConfigsKeyword_4_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('version:' VERSION)* 'networks:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     networks+=Network (ambiguity) networks+=Network
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_NetworksKeyword_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('version:' VERSION)* 'secrets:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_SecretsKeyword_5_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('version:' VERSION)* 'services:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service (ambiguity) services+=Service
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_ServicesKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('version:' VERSION)* 'volumes:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Volume (ambiguity) volumes+=Volume
	 
	 * </pre>
	 */
	protected void emit_DockerCompose_____VersionKeyword_0_0_VERSIONTerminalRuleCall_0_1__a_VolumesKeyword_3_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'aux_addresses:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     aux_addresses+=IPAMAddress (ambiguity) aux_addresses+=IPAMAddress
	 
	 * </pre>
	 */
	protected void emit_IPAMConfig_Aux_addressesKeyword_1_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'config:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=IPAMConfig (ambiguity) '-' configs+=IPAMConfig
	 
	 * </pre>
	 */
	protected void emit_IPAM_ConfigKeyword_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'options:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=IPAMOption (ambiguity) options+=IPAMOption
	 
	 * </pre>
	 */
	protected void emit_IPAM_OptionsKeyword_1_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'aliases:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     aliases+=Alias (ambiguity) '-' aliases+=Alias
	 
	 * </pre>
	 */
	protected void emit_NetworkConnector_AliasesKeyword_1_2_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'link_local_ips:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     link_local_ips+=DNS (ambiguity) '-' link_local_ips+=DNS
	 
	 * </pre>
	 */
	protected void emit_NetworkConnector_Link_local_ipsKeyword_1_2_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'driver_opts:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     driver_opts+=NetworkDriverOpt (ambiguity) driver_opts+=NetworkDriverOpt
	 
	 * </pre>
	 */
	protected void emit_Network_Driver_optsKeyword_3_1_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'labels:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=NetworkLabel (ambiguity) labels+=NetworkLabel
	 
	 * </pre>
	 */
	protected void emit_Network_LabelsKeyword_3_1_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString ':' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Network___LeftCurlyBracketKeyword_3_0_0_RightCurlyBracketKeyword_3_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))*
	 *
	 * This ambiguous syntax occurs at:
	 *     build=PATH (ambiguity) 'build:' build=PATH
	 *     build=PATH (ambiguity) 'command:' command=EString
	 *     build=PATH (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     build=PATH (ambiguity) 'container_name:' container_name=EString
	 *     build=PATH (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     build=PATH (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     build=PATH (ambiguity) 'dns:' '-' dns+=DNS
	 *     build=PATH (ambiguity) 'dns:' dns+=DNS
	 *     build=PATH (ambiguity) 'image:' image=Image
	 *     build=PATH (ambiguity) 'init:' init=EBoolean
	 *     build=PATH (ambiguity) 'networks:' networks+=NetworkConnector
	 *     build=PATH (ambiguity) 'read_only:' read_only=EBoolean
	 *     build=PATH (ambiguity) 'restart:' restart=RestartPolicy
	 *     build=PATH (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     build=PATH (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     build=PATH (ambiguity) (rule end)
	 *     command=EString (ambiguity) 'build:' build=PATH
	 *     command=EString (ambiguity) 'command:' command=EString
	 *     command=EString (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     command=EString (ambiguity) 'container_name:' container_name=EString
	 *     command=EString (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     command=EString (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     command=EString (ambiguity) 'dns:' '-' dns+=DNS
	 *     command=EString (ambiguity) 'dns:' dns+=DNS
	 *     command=EString (ambiguity) 'image:' image=Image
	 *     command=EString (ambiguity) 'init:' init=EBoolean
	 *     command=EString (ambiguity) 'networks:' networks+=NetworkConnector
	 *     command=EString (ambiguity) 'read_only:' read_only=EBoolean
	 *     command=EString (ambiguity) 'restart:' restart=RestartPolicy
	 *     command=EString (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     command=EString (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     command=EString (ambiguity) (rule end)
	 *     configs+=ConfigConnector (ambiguity) 'build:' build=PATH
	 *     configs+=ConfigConnector (ambiguity) 'command:' command=EString
	 *     configs+=ConfigConnector (ambiguity) 'container_name:' container_name=EString
	 *     configs+=ConfigConnector (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     configs+=ConfigConnector (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     configs+=ConfigConnector (ambiguity) 'dns:' '-' dns+=DNS
	 *     configs+=ConfigConnector (ambiguity) 'dns:' dns+=DNS
	 *     configs+=ConfigConnector (ambiguity) 'image:' image=Image
	 *     configs+=ConfigConnector (ambiguity) 'init:' init=EBoolean
	 *     configs+=ConfigConnector (ambiguity) 'networks:' networks+=NetworkConnector
	 *     configs+=ConfigConnector (ambiguity) 'read_only:' read_only=EBoolean
	 *     configs+=ConfigConnector (ambiguity) 'restart:' restart=RestartPolicy
	 *     configs+=ConfigConnector (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     configs+=ConfigConnector (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     configs+=ConfigConnector (ambiguity) (rule end)
	 *     container_name=EString (ambiguity) 'build:' build=PATH
	 *     container_name=EString (ambiguity) 'command:' command=EString
	 *     container_name=EString (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     container_name=EString (ambiguity) 'container_name:' container_name=EString
	 *     container_name=EString (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     container_name=EString (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     container_name=EString (ambiguity) 'dns:' '-' dns+=DNS
	 *     container_name=EString (ambiguity) 'dns:' dns+=DNS
	 *     container_name=EString (ambiguity) 'image:' image=Image
	 *     container_name=EString (ambiguity) 'init:' init=EBoolean
	 *     container_name=EString (ambiguity) 'networks:' networks+=NetworkConnector
	 *     container_name=EString (ambiguity) 'read_only:' read_only=EBoolean
	 *     container_name=EString (ambiguity) 'restart:' restart=RestartPolicy
	 *     container_name=EString (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     container_name=EString (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     container_name=EString (ambiguity) (rule end)
	 *     cpu_count=EInt (ambiguity) 'build:' build=PATH
	 *     cpu_count=EInt (ambiguity) 'command:' command=EString
	 *     cpu_count=EInt (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     cpu_count=EInt (ambiguity) 'container_name:' container_name=EString
	 *     cpu_count=EInt (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     cpu_count=EInt (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     cpu_count=EInt (ambiguity) 'dns:' '-' dns+=DNS
	 *     cpu_count=EInt (ambiguity) 'dns:' dns+=DNS
	 *     cpu_count=EInt (ambiguity) 'image:' image=Image
	 *     cpu_count=EInt (ambiguity) 'init:' init=EBoolean
	 *     cpu_count=EInt (ambiguity) 'networks:' networks+=NetworkConnector
	 *     cpu_count=EInt (ambiguity) 'read_only:' read_only=EBoolean
	 *     cpu_count=EInt (ambiguity) 'restart:' restart=RestartPolicy
	 *     cpu_count=EInt (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     cpu_count=EInt (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     cpu_count=EInt (ambiguity) (rule end)
	 *     depends_on+=Dependency (ambiguity) 'build:' build=PATH
	 *     depends_on+=Dependency (ambiguity) 'command:' command=EString
	 *     depends_on+=Dependency (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     depends_on+=Dependency (ambiguity) 'container_name:' container_name=EString
	 *     depends_on+=Dependency (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     depends_on+=Dependency (ambiguity) 'dns:' '-' dns+=DNS
	 *     depends_on+=Dependency (ambiguity) 'dns:' dns+=DNS
	 *     depends_on+=Dependency (ambiguity) 'image:' image=Image
	 *     depends_on+=Dependency (ambiguity) 'init:' init=EBoolean
	 *     depends_on+=Dependency (ambiguity) 'networks:' networks+=NetworkConnector
	 *     depends_on+=Dependency (ambiguity) 'read_only:' read_only=EBoolean
	 *     depends_on+=Dependency (ambiguity) 'restart:' restart=RestartPolicy
	 *     depends_on+=Dependency (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     depends_on+=Dependency (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     depends_on+=Dependency (ambiguity) (rule end)
	 *     dns+=DNS (ambiguity) 'build:' build=PATH
	 *     dns+=DNS (ambiguity) 'command:' command=EString
	 *     dns+=DNS (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     dns+=DNS (ambiguity) 'container_name:' container_name=EString
	 *     dns+=DNS (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     dns+=DNS (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     dns+=DNS (ambiguity) 'dns:' '-' dns+=DNS
	 *     dns+=DNS (ambiguity) 'dns:' dns+=DNS
	 *     dns+=DNS (ambiguity) 'image:' image=Image
	 *     dns+=DNS (ambiguity) 'init:' init=EBoolean
	 *     dns+=DNS (ambiguity) 'networks:' networks+=NetworkConnector
	 *     dns+=DNS (ambiguity) 'read_only:' read_only=EBoolean
	 *     dns+=DNS (ambiguity) 'restart:' restart=RestartPolicy
	 *     dns+=DNS (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     dns+=DNS (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     dns+=DNS (ambiguity) (rule end)
	 *     image=Image (ambiguity) 'build:' build=PATH
	 *     image=Image (ambiguity) 'command:' command=EString
	 *     image=Image (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     image=Image (ambiguity) 'container_name:' container_name=EString
	 *     image=Image (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     image=Image (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     image=Image (ambiguity) 'dns:' '-' dns+=DNS
	 *     image=Image (ambiguity) 'dns:' dns+=DNS
	 *     image=Image (ambiguity) 'image:' image=Image
	 *     image=Image (ambiguity) 'init:' init=EBoolean
	 *     image=Image (ambiguity) 'networks:' networks+=NetworkConnector
	 *     image=Image (ambiguity) 'read_only:' read_only=EBoolean
	 *     image=Image (ambiguity) 'restart:' restart=RestartPolicy
	 *     image=Image (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     image=Image (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     image=Image (ambiguity) (rule end)
	 *     init=EBoolean (ambiguity) 'build:' build=PATH
	 *     init=EBoolean (ambiguity) 'command:' command=EString
	 *     init=EBoolean (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     init=EBoolean (ambiguity) 'container_name:' container_name=EString
	 *     init=EBoolean (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     init=EBoolean (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     init=EBoolean (ambiguity) 'dns:' '-' dns+=DNS
	 *     init=EBoolean (ambiguity) 'dns:' dns+=DNS
	 *     init=EBoolean (ambiguity) 'image:' image=Image
	 *     init=EBoolean (ambiguity) 'init:' init=EBoolean
	 *     init=EBoolean (ambiguity) 'networks:' networks+=NetworkConnector
	 *     init=EBoolean (ambiguity) 'read_only:' read_only=EBoolean
	 *     init=EBoolean (ambiguity) 'restart:' restart=RestartPolicy
	 *     init=EBoolean (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     init=EBoolean (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     init=EBoolean (ambiguity) (rule end)
	 *     name=EString ':' (ambiguity) 'build:' build=PATH
	 *     name=EString ':' (ambiguity) 'command:' command=EString
	 *     name=EString ':' (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     name=EString ':' (ambiguity) 'container_name:' container_name=EString
	 *     name=EString ':' (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     name=EString ':' (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     name=EString ':' (ambiguity) 'dns:' '-' dns+=DNS
	 *     name=EString ':' (ambiguity) 'dns:' dns+=DNS
	 *     name=EString ':' (ambiguity) 'image:' image=Image
	 *     name=EString ':' (ambiguity) 'init:' init=EBoolean
	 *     name=EString ':' (ambiguity) 'networks:' networks+=NetworkConnector
	 *     name=EString ':' (ambiguity) 'read_only:' read_only=EBoolean
	 *     name=EString ':' (ambiguity) 'restart:' restart=RestartPolicy
	 *     name=EString ':' (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     name=EString ':' (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     name=EString ':' (ambiguity) (rule end)
	 *     networks+=NetworkConnector (ambiguity) 'build:' build=PATH
	 *     networks+=NetworkConnector (ambiguity) 'command:' command=EString
	 *     networks+=NetworkConnector (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     networks+=NetworkConnector (ambiguity) 'container_name:' container_name=EString
	 *     networks+=NetworkConnector (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     networks+=NetworkConnector (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     networks+=NetworkConnector (ambiguity) 'dns:' '-' dns+=DNS
	 *     networks+=NetworkConnector (ambiguity) 'dns:' dns+=DNS
	 *     networks+=NetworkConnector (ambiguity) 'image:' image=Image
	 *     networks+=NetworkConnector (ambiguity) 'init:' init=EBoolean
	 *     networks+=NetworkConnector (ambiguity) 'read_only:' read_only=EBoolean
	 *     networks+=NetworkConnector (ambiguity) 'restart:' restart=RestartPolicy
	 *     networks+=NetworkConnector (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     networks+=NetworkConnector (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     networks+=NetworkConnector (ambiguity) (rule end)
	 *     read_only=EBoolean (ambiguity) 'build:' build=PATH
	 *     read_only=EBoolean (ambiguity) 'command:' command=EString
	 *     read_only=EBoolean (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     read_only=EBoolean (ambiguity) 'container_name:' container_name=EString
	 *     read_only=EBoolean (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     read_only=EBoolean (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     read_only=EBoolean (ambiguity) 'dns:' '-' dns+=DNS
	 *     read_only=EBoolean (ambiguity) 'dns:' dns+=DNS
	 *     read_only=EBoolean (ambiguity) 'image:' image=Image
	 *     read_only=EBoolean (ambiguity) 'init:' init=EBoolean
	 *     read_only=EBoolean (ambiguity) 'networks:' networks+=NetworkConnector
	 *     read_only=EBoolean (ambiguity) 'read_only:' read_only=EBoolean
	 *     read_only=EBoolean (ambiguity) 'restart:' restart=RestartPolicy
	 *     read_only=EBoolean (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     read_only=EBoolean (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     read_only=EBoolean (ambiguity) (rule end)
	 *     restart=RestartPolicy (ambiguity) 'build:' build=PATH
	 *     restart=RestartPolicy (ambiguity) 'command:' command=EString
	 *     restart=RestartPolicy (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     restart=RestartPolicy (ambiguity) 'container_name:' container_name=EString
	 *     restart=RestartPolicy (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     restart=RestartPolicy (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     restart=RestartPolicy (ambiguity) 'dns:' '-' dns+=DNS
	 *     restart=RestartPolicy (ambiguity) 'dns:' dns+=DNS
	 *     restart=RestartPolicy (ambiguity) 'image:' image=Image
	 *     restart=RestartPolicy (ambiguity) 'init:' init=EBoolean
	 *     restart=RestartPolicy (ambiguity) 'networks:' networks+=NetworkConnector
	 *     restart=RestartPolicy (ambiguity) 'read_only:' read_only=EBoolean
	 *     restart=RestartPolicy (ambiguity) 'restart:' restart=RestartPolicy
	 *     restart=RestartPolicy (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     restart=RestartPolicy (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     restart=RestartPolicy (ambiguity) (rule end)
	 *     secrets+=SecretConnector (ambiguity) 'build:' build=PATH
	 *     secrets+=SecretConnector (ambiguity) 'command:' command=EString
	 *     secrets+=SecretConnector (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     secrets+=SecretConnector (ambiguity) 'container_name:' container_name=EString
	 *     secrets+=SecretConnector (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     secrets+=SecretConnector (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     secrets+=SecretConnector (ambiguity) 'dns:' '-' dns+=DNS
	 *     secrets+=SecretConnector (ambiguity) 'dns:' dns+=DNS
	 *     secrets+=SecretConnector (ambiguity) 'image:' image=Image
	 *     secrets+=SecretConnector (ambiguity) 'init:' init=EBoolean
	 *     secrets+=SecretConnector (ambiguity) 'networks:' networks+=NetworkConnector
	 *     secrets+=SecretConnector (ambiguity) 'read_only:' read_only=EBoolean
	 *     secrets+=SecretConnector (ambiguity) 'restart:' restart=RestartPolicy
	 *     secrets+=SecretConnector (ambiguity) 'volumes:' '-' volumes+=VolumeConnector
	 *     secrets+=SecretConnector (ambiguity) (rule end)
	 *     volumes+=VolumeConnector (ambiguity) 'build:' build=PATH
	 *     volumes+=VolumeConnector (ambiguity) 'command:' command=EString
	 *     volumes+=VolumeConnector (ambiguity) 'configs:' '-' configs+=ConfigConnector
	 *     volumes+=VolumeConnector (ambiguity) 'container_name:' container_name=EString
	 *     volumes+=VolumeConnector (ambiguity) 'cpu_count:' cpu_count=EInt
	 *     volumes+=VolumeConnector (ambiguity) 'depends_on:' '-' depends_on+=Dependency
	 *     volumes+=VolumeConnector (ambiguity) 'dns:' '-' dns+=DNS
	 *     volumes+=VolumeConnector (ambiguity) 'dns:' dns+=DNS
	 *     volumes+=VolumeConnector (ambiguity) 'image:' image=Image
	 *     volumes+=VolumeConnector (ambiguity) 'init:' init=EBoolean
	 *     volumes+=VolumeConnector (ambiguity) 'networks:' networks+=NetworkConnector
	 *     volumes+=VolumeConnector (ambiguity) 'read_only:' read_only=EBoolean
	 *     volumes+=VolumeConnector (ambiguity) 'restart:' restart=RestartPolicy
	 *     volumes+=VolumeConnector (ambiguity) 'secrets:' '-' secrets+=SecretConnector
	 *     volumes+=VolumeConnector (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Service_____DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))* 'configs:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     configs+=ConfigConnector (ambiguity) '-' configs+=ConfigConnector
	 
	 * </pre>
	 */
	protected void emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_ConfigsKeyword_3_10_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))* 'depends_on:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     depends_on+=Dependency (ambiguity) '-' depends_on+=Dependency
	 
	 * </pre>
	 */
	protected void emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_Depends_onKeyword_3_7_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))* 'dns:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     dns+=DNS (ambiguity) '-' dns+=DNS
	 
	 * </pre>
	 */
	protected void emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_DnsKeyword_3_13_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))* 'networks:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     networks+=NetworkConnector (ambiguity) networks+=NetworkConnector
	 
	 * </pre>
	 */
	protected void emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_NetworksKeyword_3_8_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))* 'secrets:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=SecretConnector (ambiguity) '-' secrets+=SecretConnector
	 
	 * </pre>
	 */
	protected void emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_SecretsKeyword_3_11_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((('devices:' ('-' DEVICE)+) | ('ports:' ('-' PORT)+))* 'volumes:')?
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=VolumeConnector (ambiguity) '-' volumes+=VolumeConnector
	 
	 * </pre>
	 */
	protected void emit_Service_______DevicesKeyword_3_12_0___HyphenMinusKeyword_3_12_1_0_DEVICETerminalRuleCall_3_12_1_1__p___or___PortsKeyword_3_14_0___HyphenMinusKeyword_3_14_1_0_PORTTerminalRuleCall_3_14_1_1__p____a_VolumesKeyword_3_9_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'driver_opts:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     driver_opts+=VolumeDriverOpt (ambiguity) driver_opts+=VolumeDriverOpt
	 
	 * </pre>
	 */
	protected void emit_Volume_Driver_optsKeyword_3_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'labels:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=VolumeLabel (ambiguity) labels+=VolumeLabel
	 
	 * </pre>
	 */
	protected void emit_Volume_LabelsKeyword_3_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
