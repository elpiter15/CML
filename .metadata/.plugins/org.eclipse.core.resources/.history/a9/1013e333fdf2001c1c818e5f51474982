// automatically generated by Xtext
grammar org.xtext.example.dockercompose.DockerCompose with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/modeling/example/dockercompose/DockerCompose" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DockerCompose returns DockerCompose:
	(
			//('version:' 	version=EDouble)?
			('version:' 	VERSION)?
		&	('services:' 	(services+=Service)+ )
		&	('networks:'	(networks+=Network)+ )?
		&	('volumes:' 	(volumes+=Volume)+ )?
		&	('configs:' 	(configs+=Config)+ )?
		&	('secrets:' 	(secrets+=Secret)+ )?
	);

//Version returns ecore::EString:
	//INT'.'INT
//;

terminal VERSION:
	'"'INT '.' INT'"';

EDouble returns ecore::EDouble:
	INT '.' INT;

Service returns Service:
	{Service}
	name=EString ':'
	(
			(('build:' 			build=PATH) |
			('image:' 			image=Image))
		&	('cpu_count:' 		cpu_count=EInt)?
		&	('command:' 		command=EString)?
		&	('container_name:' 	container_name=EString)?
		&	('restart:' 		restart=RestartPolicy)?
		&	('init:'			init=EBoolean)?
		&	('read_only:'		read_only=EBoolean)?
		
		&	('depends_on:' 		('-'depends_on+=Dependency)+ )?		// añadir condition
		&	('networks:' 		(networks+=NetworkConnector)+ )?
		&	('volumes:' 		('-'volumes+=VolumeConnector)+ )?
		&	('configs:' 		('-'configs+=ConfigConnector)+ )?	// long syntax
		&	('secrets:' 		('-'secrets+=SecretConnector)+ )?	// long syntax
		
		//&	('devices:' 		('-'devices+=Device)+ )?
		&	('devices:' 		(DEVICE)+ )?
		&	('dns:'				(('-'dns+=DNS)+ | dns+=DNS) )?
		//&	('ports:'			('-'ports+=Port)+ )?
		&	('ports:'			('-'PORT)+ )?
	);

//Port returns Port:
	//{Port}
	//COMILLAS/*((host_ip=DNS)?':'host_port=EInt('-'host_port_end=EInt)?':')?container_port=EInt('-'container_port_end=EInt)?('/'protocol=EString)?*/COMILLAS;

Image returns ecore::EString:
		EString | ID(':'ID)+;

Dependency returns Dependency:
	{Dependency}
	service=[Service|EString]
	;
	
NetworkConnector returns NetworkConnector:
	{NetworkConnector}
	('-'network=[Network|EString]) |
	(network=[Network|EString]':'	
	(
			('ipv4_address:'	ipv4_address=DNS)?
		&	('priority:'		priority=EInt)?
		
		&	('aliases:' 		('-'aliases+=Alias)+ )?
		&	('link_local_ips:' 	('-'link_local_ips+=DNS)+ )?
	))
	;

Alias returns Alias:
	{Alias}
	alias=EString
	;

VolumeConnector returns VolumeConnector:
	{VolumeConnector}
	((volume=[Volume|EString]':'container_path=PATH(':'access_mode=AccessMode)?)
	| (
			('source:'			volume=[Volume|EString])
		&	('type:'			type=MountType)?
		&	('target:'			container_path=PATH)
		&	('read_only:' 		read_only=EBoolean)?
		&	('bind:'
				'propagation:'	propagation=PropagationType)?
		&	('volume:'
				'nocopy:' 		nocopy=EBoolean)?
		&	('tmpfs:'
				'size:' 		size=EInt)?
	))
	;
	
ConfigConnector returns ConfigConnector:
	{ConfigConnector}
	((config=[Config|EString])
	| (
			('source:'	config=[Config|EString])
		&	('target:'	target=PATH)?
		&	('uid:' 	uid=QUOTED_INT)?
		&	('gid:' 	gid=QUOTED_INT)?
		&	('mode:' 	mode=EInt)?
	))
	;

SecretConnector returns SecretConnector:
	{SecretConnector}
	((secret=[Secret|EString])
	| (
			('source:'	secret=[Secret|EString])
		&	('target:'	target=PATH)?
		&	('uid:' 	uid=QUOTED_INT)?
		&	('gid:' 	gid=QUOTED_INT)?
		&	('mode:' 	mode=EInt)?
	))
	;
	
terminal QUOTED_INT:
	'"'INT'"';
	
Network returns Network:
	{Network}
	name=EString ':'
	(
		'{''}' |
			(('driver:'		driver=EString)?
		&	('attachable:'	attachable=EBoolean)?
		&	('enable_ipv6:'	enable_ipv6=EBoolean)?
		&	('internal:'	internal=EBoolean)?
		&	('external:'	external=EBoolean)?
		&	('name:' 		network_name=EString)?

		&	('labels:' 		(labels+=NetworkLabel)+ )?
		&	('driver_opts:' (driver_opts+=NetworkDriverOpt)+ )?
		&	('ipam:' 		(ipam=IPAM))?) 
		
	);

Volume returns Volume:
	{Volume}
	name=EString':'
	(
			('external:' 	external?=EBoolean)?
		&	('driver:' 		driver=EString)?
		&	('name:' 		volume_name=EString)?
		&	('labels:' 		(labels+=VolumeLabel)+ )?
		&	('driver_opts:' (driver_opts+=VolumeDriverOpt)+ )?
	);

Config returns Config:
	{Config}
	name=EString':'
	(
			('external:'	external=EBoolean)?
		&	('file:' 		file=EString)?
		&	('name:' 		config_name=EString)?
	);

Secret returns Secret:
	{Secret}
	name=EString':'
	(
			('external:'	external=EBoolean)?
		&	('file:' 		file=EString)?
		&	('environment:' environment=EString)?
		&	('name:' 		secret_name=EString)?
	);

VolumeLabel returns VolumeLabel:
	{VolumeLabel}
	name=EString':' value=EString;
	
VolumeDriverOpt returns VolumeDriverOpt:
	{VolumeDriverOpt}
	name=EString':' value=EString;

NetworkLabel returns NetworkLabel:
	{NetworkLabel}
	name=EString':' value=EString;
	
NetworkDriverOpt returns NetworkDriverOpt:
	{NetworkDriverOpt}
	name=EString':' value=EString;

IPAM returns IPAM:
	{IPAM}
	(
			('driver:'	driver=EString)?
		&	('config:'	('-'configs+=IPAMConfig)+ )?
		&	('options:'	(options+=IPAMOption)+ )?
	);

IPAMConfig returns IPAMConfig:
	{IPAMConfig}
	(
			('subnet:'			subnet=NetworkAddress)?
		&	('ip_range:' 		ip_range=NetworkAddress)?
		&	('gateway:' 		gateway=DNS)?
		&	('aux_addresses:'	(aux_addresses+=IPAMAddress)+ )?
	);

IPAMOption returns IPAMOption:
	{IPAMOption}
	name=EString':' value=EString;

IPAMAddress returns IPAMAddress:
	{IPAMAddress}
	name=EString':' dns=DNS;

/*
terminal PORT:
	'"'PORT_DEF'"' | PORT_DEF;
 
 
terminal PORT_DEF:
	(((('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+':')?('0'..'9')+'-'('0'..'9')+':')?('0'..'9')+'-'('0'..'9')+('/'ID)?)
	| (((('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+':')?('0'..'9')+':')?('0'..'9')+('/'ID)?);
*/

terminal PORT:
	'"'(((((('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))':')?INT'-'INT':')?INT'-'INT('/'ID)?)
	| ((((('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))':')?INT':')?INT('/'ID)?))'"';

terminal DEVICE:
	'-''"''.'?'/'?ID':''.'?'/'?ID(':'ID)?'"';

PATH returns ecore::EString:
	'.'? '/'? (ID)*;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	INT;

terminal ID: 
	('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'/'|'.'|'0'..'9')*;

//Device returns Device:
	//host_path='"' EString':'container_path=EString(':'cgroup_permissions=EString)?'"';

DNS returns DNS:
	dns1=EInt'.'dns2=EInt'.'dns3=EInt'.'dns4=EInt;
	
NetworkAddress returns NetworkAddress:
	dns1=EInt'.'dns2=EInt'.'dns3=EInt'.'dns4=EInt'/'netId=EInt;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum RestartPolicy returns RestartPolicy:
				no = '"no"' | always = 'always' | onfailure = 'on-failure' | unlessstopped = 'unless-stopped';
				
enum AccessMode returns AccessMode:
				rw = 'rw' | ro = 'ro' | z = 'z' ;
				
enum MountType returns MountType:
				volume = 'volume' | bind = 'bind' | tmpfs = 'tmpfs' | npipe = 'npipe';
				
enum PropagationType returns PropagationType:
				rprivate = 'rprivate' | private = 'private' | rshared = 'rshared' | shared = 'shared' | rslave = 'rslave' | slave = 'slave';