/**
 */
package dockercompose.impl;

import dockercompose.AccessMode;
import dockercompose.DockercomposePackage;
import dockercompose.Volume;
import dockercompose.VolumeConnector;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Volume Connector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dockercompose.impl.VolumeConnectorImpl#getVolume <em>Volume</em>}</li>
 *   <li>{@link dockercompose.impl.VolumeConnectorImpl#getContainer_path <em>Container path</em>}</li>
 *   <li>{@link dockercompose.impl.VolumeConnectorImpl#getAccess_mode <em>Access mode</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VolumeConnectorImpl extends MinimalEObjectImpl.Container implements VolumeConnector {
	/**
	 * The cached value of the '{@link #getVolume() <em>Volume</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVolume()
	 * @generated
	 * @ordered
	 */
	protected Volume volume;

	/**
	 * The default value of the '{@link #getContainer_path() <em>Container path</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getContainer_path()
	 * @generated
	 * @ordered
	 */
	protected static final String CONTAINER_PATH_EDEFAULT = ".";

	/**
	 * The cached value of the '{@link #getContainer_path() <em>Container path</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getContainer_path()
	 * @generated
	 * @ordered
	 */
	protected String container_path = CONTAINER_PATH_EDEFAULT;

	/**
	 * The default value of the '{@link #getAccess_mode() <em>Access mode</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAccess_mode()
	 * @generated
	 * @ordered
	 */
	protected static final AccessMode ACCESS_MODE_EDEFAULT = AccessMode.RW;

	/**
	 * The cached value of the '{@link #getAccess_mode() <em>Access mode</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAccess_mode()
	 * @generated
	 * @ordered
	 */
	protected AccessMode access_mode = ACCESS_MODE_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VolumeConnectorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return DockercomposePackage.Literals.VOLUME_CONNECTOR;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Volume getVolume() {
		if (volume != null && volume.eIsProxy()) {
			InternalEObject oldVolume = (InternalEObject)volume;
			volume = (Volume)eResolveProxy(oldVolume);
			if (volume != oldVolume) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, DockercomposePackage.VOLUME_CONNECTOR__VOLUME, oldVolume, volume));
			}
		}
		return volume;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Volume basicGetVolume() {
		return volume;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setVolume(Volume newVolume) {
		Volume oldVolume = volume;
		volume = newVolume;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DockercomposePackage.VOLUME_CONNECTOR__VOLUME, oldVolume, volume));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getContainer_path() {
		return container_path;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setContainer_path(String newContainer_path) {
		String oldContainer_path = container_path;
		container_path = newContainer_path;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DockercomposePackage.VOLUME_CONNECTOR__CONTAINER_PATH, oldContainer_path, container_path));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public AccessMode getAccess_mode() {
		return access_mode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAccess_mode(AccessMode newAccess_mode) {
		AccessMode oldAccess_mode = access_mode;
		access_mode = newAccess_mode == null ? ACCESS_MODE_EDEFAULT : newAccess_mode;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DockercomposePackage.VOLUME_CONNECTOR__ACCESS_MODE, oldAccess_mode, access_mode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case DockercomposePackage.VOLUME_CONNECTOR__VOLUME:
				if (resolve) return getVolume();
				return basicGetVolume();
			case DockercomposePackage.VOLUME_CONNECTOR__CONTAINER_PATH:
				return getContainer_path();
			case DockercomposePackage.VOLUME_CONNECTOR__ACCESS_MODE:
				return getAccess_mode();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case DockercomposePackage.VOLUME_CONNECTOR__VOLUME:
				setVolume((Volume)newValue);
				return;
			case DockercomposePackage.VOLUME_CONNECTOR__CONTAINER_PATH:
				setContainer_path((String)newValue);
				return;
			case DockercomposePackage.VOLUME_CONNECTOR__ACCESS_MODE:
				setAccess_mode((AccessMode)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case DockercomposePackage.VOLUME_CONNECTOR__VOLUME:
				setVolume((Volume)null);
				return;
			case DockercomposePackage.VOLUME_CONNECTOR__CONTAINER_PATH:
				setContainer_path(CONTAINER_PATH_EDEFAULT);
				return;
			case DockercomposePackage.VOLUME_CONNECTOR__ACCESS_MODE:
				setAccess_mode(ACCESS_MODE_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case DockercomposePackage.VOLUME_CONNECTOR__VOLUME:
				return volume != null;
			case DockercomposePackage.VOLUME_CONNECTOR__CONTAINER_PATH:
				return CONTAINER_PATH_EDEFAULT == null ? container_path != null : !CONTAINER_PATH_EDEFAULT.equals(container_path);
			case DockercomposePackage.VOLUME_CONNECTOR__ACCESS_MODE:
				return access_mode != ACCESS_MODE_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (container_path: ");
		result.append(container_path);
		result.append(", access_mode: ");
		result.append(access_mode);
		result.append(')');
		return result.toString();
	}

} //VolumeConnectorImpl
