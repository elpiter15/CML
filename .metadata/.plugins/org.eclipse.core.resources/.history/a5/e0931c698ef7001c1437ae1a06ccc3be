// automatically generated by Xtext
grammar org.xtext.example.dockercompose.DockerCompose with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/modeling/example/dockercompose/DockerCompose" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DockerCompose returns DockerCompose:
	'DockerCompose'
	'{'
		('version' version=EString)?
		'services' '{' services+=Service ( "," services+=Service)* '}' 
		('networks' '{' networks+=Network ( "," networks+=Network)* '}' )?
		('volumes' '{' volumes+=Volume ( "," volumes+=Volume)* '}' )?
		('configs' '{' configs+=Config ( "," configs+=Config)* '}' )?
		('secrets' '{' secrets+=Secret ( "," secrets+=Secret)* '}' )?
	'}';







DNS returns DNS:
	DNS_Impl | NetworkAddress;

















EString returns ecore::EString:
	STRING | ID;

Service returns Service:
	init?='init'
	read_only?='read_only'
	'Service'
	name=EString
	'{'
		('build' build=EString)?
		'cpu_count' cpu_count=EInt
		('command' command=EString)?
		('container_name' container_name=EString)?
		('image' image=EString)?
		('restart' restart=RestartPolicy)?
		('links' '(' links+=[Service|EString] ( "," links+=[Service|EString])* ')' )?
		('devices' '{' devices+=Device ( "," devices+=Device)* '}' )?
		('dns' '{' dns+=DNS ( "," dns+=DNS)* '}' )?
		('depends_on' '{' depends_on+=Dependency ( "," depends_on+=Dependency)* '}' )?
		('volumes' '{' volumes+=VolumeConnector ( "," volumes+=VolumeConnector)* '}' )?
		('configs' '{' configs+=ConfigConnector ( "," configs+=ConfigConnector)* '}' )?
		('secrets' '{' secrets+=SecretConnector ( "," secrets+=SecretConnector)* '}' )?
		('networks' '{' networks+=NetworkConnector ( "," networks+=NetworkConnector)* '}' )?
		('ports' '{' ports+=Port ( "," ports+=Port)* '}' )?
	'}';

Network returns Network:
	attachable?='attachable'
	enable_ipv6?='enable_ipv6'
	internal?='internal'
	external?='external'
	'Network'
	name=EString
	'{'
		('network_name' network_name=EString)?
		('driver' driver=EString)?
		('labels' '{' labels+=NetworkLabel ( "," labels+=NetworkLabel)* '}' )?
		('driver_opts' '{' driver_opts+=NetworkDriverOpt ( "," driver_opts+=NetworkDriverOpt)* '}' )?
		('ipam' ipam=IPAM)?
	'}';

Volume returns Volume:
	external?='external'
	'Volume'
	name=EString
	'{'
		('driver' driver=EString)?
		('volume_name' volume_name=EString)?
		('driver_opts' '{' driver_opts+=VolumeDriverOpt ( "," driver_opts+=VolumeDriverOpt)* '}' )?
		('labels' '{' labels+=VolumeLabel ( "," labels+=VolumeLabel)* '}' )?
	'}';

Config returns Config:
	external?='external'
	'Config'
	name=EString
	'{'
		('file' file=EString)?
		('config_name' config_name=EString)?
	'}';

Secret returns Secret:
	external?='external'
	'Secret'
	name=EString
	'{'
		('file' file=EString)?
		('environment' environment=EString)?
		('secret_name' secret_name=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Device returns Device:
	{Device}
	'Device'
	'{'
		('value' value=EString)?
	'}';

DNS_Impl returns DNS:
	'DNS'
	'{'
		'dns1' dns1=EInt
		'dns2' dns2=EInt
		'dns3' dns3=EInt
		'dns4' dns4=EInt
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum RestartPolicy returns RestartPolicy:
				no = 'no' | always = 'always' | onfailure = 'onfailure' | unlessstopped = 'unlessstopped';

Dependency returns Dependency:
	'Dependency'
	'{'
		'service' service=[Service|EString]
	'}';

VolumeConnector returns VolumeConnector:
	read_only?='read_only'
	nocopy?='nocopy'
	'VolumeConnector'
	'{'
		'container_path' container_path=EString
		('access_mode' access_mode=AccessMode)?
		('type' type=MountType)?
		'size' size=EInt
		('propagation' propagation=PropagationType)?
		'volume' volume=[Volume|EString]
	'}';

ConfigConnector returns ConfigConnector:
	'ConfigConnector'
	'{'
		('target' target=EString)?
		('uid' uid=EString)?
		('gid' gid=EString)?
		'mode' mode=EInt
		'config' config=[Config|EString]
	'}';

SecretConnector returns SecretConnector:
	'SecretConnector'
	'{'
		('target' target=EString)?
		('uid' uid=EString)?
		('gid' gid=EString)?
		'mode' mode=EInt
		'secret' secret=[Secret|EString]
	'}';

NetworkConnector returns NetworkConnector:
	'NetworkConnector'
	'{'
		'priority' priority=EInt
		'network' network=[Network|EString]
		('ipv4_address' ipv4_address=DNS)?
		('link_local_ips' '{' link_local_ips+=DNS ( "," link_local_ips+=DNS)* '}' )?
		('aliases' '{' aliases+=Alias ( "," aliases+=Alias)* '}' )?
	'}';

Port returns Port:
	{Port}
	'Port'
	'{'
		('value' value=EString)?
	'}';

NetworkAddress returns NetworkAddress:
	'NetworkAddress'
	'{'
		'dns1' dns1=EInt
		'dns2' dns2=EInt
		'dns3' dns3=EInt
		'dns4' dns4=EInt
		'netId' netId=EInt
	'}';

enum AccessMode returns AccessMode:
				rw = 'rw' | ro = 'ro' | z = 'z';

enum MountType returns MountType:
				volume = 'volume' | bind = 'bind' | tmpfs = 'tmpfs' | npipe = 'npipe';

enum PropagationType returns PropagationType:
				rprivate = 'rprivate' | private = 'private' | rshared = 'rshared' | shared = 'shared' | slave = 'slave' | rslave = 'rslave';

Alias returns Alias:
	{Alias}
	'Alias'
	'{'
		('alias' alias=EString)?
	'}';

NetworkLabel returns NetworkLabel:
	'NetworkLabel'
	name=EString
	'{'
		'value' value=EString
	'}';

NetworkDriverOpt returns NetworkDriverOpt:
	'NetworkDriverOpt'
	name=EString
	'{'
		'value' value=EString
	'}';

IPAM returns IPAM:
	{IPAM}
	'IPAM'
	'{'
		('driver' driver=EString)?
		('options' '{' options+=IPAMOption ( "," options+=IPAMOption)* '}' )?
		('configs' '{' configs+=IPAMConfig ( "," configs+=IPAMConfig)* '}' )?
	'}';

IPAMOption returns IPAMOption:
	'IPAMOption'
	name=EString
	'{'
		'value' value=EString
	'}';

IPAMConfig returns IPAMConfig:
	{IPAMConfig}
	'IPAMConfig'
	'{'
		('gateway' gateway=DNS)?
		('subnet' subnet=NetworkAddress)?
		('ip_range' ip_range=NetworkAddress)?
		('aux_addresses' '{' aux_addresses+=IPAMAddress ( "," aux_addresses+=IPAMAddress)* '}' )?
	'}';

IPAMAddress returns IPAMAddress:
	'IPAMAddress'
	name=EString
	'{'
		'dns' dns=DNS
	'}';

VolumeDriverOpt returns VolumeDriverOpt:
	'VolumeDriverOpt'
	name=EString
	'{'
		'value' value=EString
	'}';

VolumeLabel returns VolumeLabel:
	'VolumeLabel'
	name=EString
	'{'
		'value' value=EString
	'}';
