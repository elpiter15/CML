/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.dockercompose.formatting2

import com.google.inject.Inject
import dockercompose.DockerCompose
import dockercompose.Service
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.dockercompose.services.DockerComposeGrammarAccess

class DockerComposeFormatter extends AbstractFormatter2 {
	
	@Inject extension DockerComposeGrammarAccess

	def dispatch void format(DockerCompose dockerCompose, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (service : dockerCompose.services) {
			service.format
		}
		for (network : dockerCompose.networks) {
			network.format
		}
		for (volume : dockerCompose.volumes) {
			volume.format
		}
		for (config : dockerCompose.configs) {
			config.format
		}
		for (secret : dockerCompose.secrets) {
			secret.format
		}
	}

	def dispatch void format(Service service, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (dependency : service.depends_on) {
			dependency.format
		}
		for (networkConnector : service.networks) {
			networkConnector.format
		}
		for (volumeConnector : service.volumes) {
			volumeConnector.format
		}
		for (configConnector : service.configs) {
			configConnector.format
		}
		for (secretConnector : service.secrets) {
			secretConnector.format
		}
		for (device : service.devices) {
			device.format
		}
		for (dNS : service.dns) {
			dNS.format
		}
		for (port : service.ports) {
			port.format
		}
	}
	
	// TODO: implement for NetworkConnector, Network, Volume, IPAM, IPAMConfig, IPAMAddress
}
