// automatically generated by Xtext
grammar org.xtext.example.dockercompose.DockerCompose with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/modeling/example/dockercompose/DockerCompose" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DockerCompose returns DockerCompose:
	(
			('version:' 	version=VERSION)?
		&	('services:' 	(services+=Service)+ )
		&	('volumes:' 	(volumes+=Volume)+ )?
		&	('configs:' 	(configs+=Config)+ )?
		&	('secrets:' 	(secrets+=Secret)+ )?
		&	('networks:'	(networks+=Network)+ )?
	);

terminal VERSION:
	'"'INT '.' INT'"';

EDouble returns ecore::EDouble:
	INT '.' INT;

Service returns Service:
	{Service}
	name=EString ':'
	(
			(('build:' 			build=PATH) |
			('image:' 			image=Image))
		&	('cpu_count:' 		cpu_count=EInt)?
		&	('command:' 		command=EString)?
		&	('container_name:' 	container_name=EString)?
		&	('restart:' 		restart=RestartPolicy)?
		&	('init:'			init=EBoolean)?
		&	('read_only:'		read_only=EBoolean)?
		
		&	('links:' 			('-'links+=Link)+ )?
		&	('depends_on:' 		((depends_on+=Dependency_short)+ | (depends_on+=Dependency_long)+ ))?
		&	('networks:' 		(networks+=NetworkConnector)+)?
		//&	('networks:' 		((networks+=NetworkConnector_short)+ | (networks+=NetworkConnector_long)+ ))?
		&	('volumes:' 		(('-'volumes+=VolumeConnector_short)+ | ('-'volumes+=VolumeConnector_long)+ ))?
		&	('configs:' 		(('-'configs+=ConfigConnector_short)+ | ('-'configs+=ConfigConnector_long)+ ))?
		&	('secrets:' 		(('-'secrets+=SecretConnector_short)+ | ('-'secrets+=SecretConnector_long)+ ))?
		 
		&	('devices:' 		('-'devices+=Device)+ )?
		&	('dns:'				(('-'dns+=DNS)+ | dns+=DNS) )?
		&	('ports:'			('-'ports+=Port)+ )?
	);

Port returns Port:
	{Port}
	value=PORT_DEF;
	
Device returns Device:
	{Device}
	value=DEVICE_DEF;

Image returns ecore::EString:
		EString | ID(':'ID)+;

Link returns Link:
	{Link}
	service=[Service|EString](':'alias=EString)?;

Dependency_short returns Dependency:
	{Dependency}
	'-'service=[Service|EString];
	
Dependency_long returns Dependency:
	{Dependency}
	service=[Service|EString]':'
	'condition:' condition=Condition;
/*
NetworkConnector_long returns NetworkConnector:
	{NetworkConnector}
	network=[Network|EString]':'
	(
			('ipv4_address:'	ipv4_address=DNS)?
		&	('priority:'		priority=EInt)?
		
		&	('aliases:' 		('-'aliases+=Alias)+ )?
		&	('link_local_ips:' 	('-'link_local_ips+=DNS)+ )?
	);
	
NetworkConnector_short returns NetworkConnector:
	{NetworkConnector}
	'-'network=[Network|EString];
 */
NetworkConnector returns NetworkConnector:
	{NetworkConnector}
	('-'network=[Network|EString] |
	(network=[Network|EString]':'
	(
			('ipv4_address:'	ipv4_address=DNS)?
		&	('priority:'		priority=EInt)?
		
		&	('aliases:' 		('-'aliases+=Alias)+ )?
		&	('link_local_ips:' 	('-'link_local_ips+=DNS)+ )?
	))); 
 
Alias returns Alias:
	{Alias}
	alias=EString
	;

VolumeConnector_long returns VolumeConnector:
	{VolumeConnector}
	(
			('source:'			volume=[Volume|EString])
		&	('type:'			type=MountType)?
		&	('target:'			container_path=PATH)
		&	('read_only:' 		read_only=EBoolean)?
		&	('bind:'
				'propagation:'	propagation=PropagationType)?
		&	('volume:'
				'nocopy:' 		nocopy=EBoolean)?
		&	('tmpfs:'
				'size:' 		size=EInt)?
	);

VolumeConnector_short returns VolumeConnector:
	{VolumeConnector}
	volume=[Volume|EString]':'container_path=PATH(':'access_mode=AccessMode)?;
	
ConfigConnector_long returns ConfigConnector:
	{ConfigConnector}
	(
			('source:'	config=[Config|EString])
		&	('target:'	target=PATH)?
		&	('uid:' 	uid=QUOTED_INT)?
		&	('gid:' 	gid=QUOTED_INT)?
		&	('mode:' 	mode=EInt)?
	);
	
ConfigConnector_short returns ConfigConnector:
	{ConfigConnector}
	config=[Config|EString];

SecretConnector_long returns SecretConnector:
	{SecretConnector}
	(
			('source:'	secret=[Secret|EString])
		&	('target:'	target=PATH)?
		&	('uid:' 	uid=QUOTED_INT)?
		&	('gid:' 	gid=QUOTED_INT)?
		&	('mode:' 	mode=EInt)?
	);

SecretConnector_short returns SecretConnector:
	{SecretConnector}
	secret=[Secret|EString];
	
terminal QUOTED_INT:
	'"'/*INT*/'"';
	
Network returns Network:
	{Network}
	name=EString ':'
	(
		'{''}' |
			(('driver:'		driver=EString)?
		&	('attachable:'	attachable=EBoolean)?
		&	('enable_ipv6:'	enable_ipv6=EBoolean)?
		&	('internal:'	internal=EBoolean)?
		&	('external:'	external=EBoolean)?
		&	('name:' 		network_name=EString)?

		&	('labels:' 		(labels+=NetworkLabel)+ )?
		&	('driver_opts:' (driver_opts+=NetworkDriverOpt)+ )?
		&	('ipam:' 		ipam=IPAM)?) 
		
	);

Volume returns Volume:
	{Volume}
	name=EString':'
	(
			('external:' 	external?=EBoolean)?
		&	('driver:' 		driver=EString)?
		&	('name:' 		volume_name=EString)?
		&	('labels:' 		(labels+=VolumeLabel)+ )?
		&	('driver_opts:' (driver_opts+=VolumeDriverOpt)+ )?
	);

Config returns Config:
	{Config}
	name=EString':'
	(
			('external:'	external=EBoolean)?
		&	('file:' 		file=EString)?
		&	('name:' 		config_name=EString)?
	);

Secret returns Secret:
	{Secret}
	name=EString':'
	(
			('external:'	external=EBoolean)?
		&	('file:' 		file=EString)?
		&	('environment:' environment=EString)?
		&	('name:' 		secret_name=EString)?
	);

VolumeLabel returns VolumeLabel:
	{VolumeLabel}
	name=EString':' value=EString;
	
VolumeDriverOpt returns VolumeDriverOpt:
	{VolumeDriverOpt}
	name=EString':' value=EString;

NetworkLabel returns NetworkLabel:
	{NetworkLabel}
	name=EString':' value=EString;
	
NetworkDriverOpt returns NetworkDriverOpt:
	{NetworkDriverOpt}
	name=EString':' value=EString;

IPAM returns IPAM:
	{IPAM}
	(
			('driver:'	driver=EString)?
		&	('config:'	('-'configs+=IPAMConfig)+ )?
		&	('options:'	(options+=IPAMOption)+ )?
	);

IPAMConfig returns IPAMConfig:
	{IPAMConfig}
	(
			('subnet:'			subnet=NetworkAddress)?
		&	('ip_range:' 		ip_range=NetworkAddress)?
		&	('gateway:' 		gateway=DNS)?
		&	('aux_addresses:'	(aux_addresses+=IPAMAddress)+ )?
	);

IPAMOption returns IPAMOption:
	{IPAMOption}
	name=EString':' value=EString;

IPAMAddress returns IPAMAddress:
	{IPAMAddress}
	name=EString':' dns=DNS;

/*
terminal PORT:
	'"'PORT_DEF'"' | PORT_DEF;
 
 
terminal PORT_DEF:
	(((('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+':')?('0'..'9')+'-'('0'..'9')+':')?('0'..'9')+'-'('0'..'9')+('/'ID)?)
	| (((('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+'.'('0'..'9')+':')?('0'..'9')+':')?('0'..'9')+('/'ID)?);
*/

terminal PORT_DEF:
	'"'(((((('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))':')?INT'-'INT':')?INT'-'INT('/'ID)?)
	| ((((('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))'.'
	(('0'..'9')|('0'..'9')('0'..'9')|'1'('0'..'9')('0'..'9')|'2'('0'..'5')('0'..'5'))':')?INT':')?INT('/'ID)?))'"';

terminal DEVICE_DEF:
	'"''.'?'/'?ID':''.'?'/'?ID(':'ID)?'"';

PATH returns ecore::EString:
	'.'? '/'? (ID)*;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	INT;

terminal ID: 
	//('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'/'|'.'|'0'..'9')*;
	('^')?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'-'|'.'|'0'..'9')*;

DNS returns DNS:
	dns1=EInt'.'dns2=EInt'.'dns3=EInt'.'dns4=EInt;
	
NetworkAddress returns NetworkAddress:
	dns1=EInt'.'dns2=EInt'.'dns3=EInt'.'dns4=EInt'/'netId=EInt;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum RestartPolicy returns RestartPolicy:
				no = '"no"' | always = 'always' | onfailure = 'on-failure' | unlessstopped = 'unless-stopped';
				
enum AccessMode returns AccessMode:
				rw = 'rw' | ro = 'ro' | z = 'z' ;
				
enum MountType returns MountType:
				volume = 'volume' | bind = 'bind' | tmpfs = 'tmpfs' | npipe = 'npipe';
				
enum PropagationType returns PropagationType:
				rprivate = 'rprivate' | private = 'private' | rshared = 'rshared' | shared = 'shared' | rslave = 'rslave' | slave = 'slave';
				
enum Condition returns Condition:
				service_started = 'service_started' | service_healthy = 'service_healthy' | service_completed_successfully = 'service_completed_successfully';
				